// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace SampleDAL
{
    public partial class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
            InitializePartial();
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
            InitializePartial();
        }

        public DbSet<SalesLT_Address> SalesLT_Addresses { get; set; } // Address
        public DbSet<SalesLT_Customer> SalesLT_Customers { get; set; } // Customer
        public DbSet<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress
        public DbSet<SalesLT_Product> SalesLT_Products { get; set; } // Product
        public DbSet<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; } // ProductCategory
        public DbSet<SalesLT_ProductDescription> SalesLT_ProductDescriptions { get; set; } // ProductDescription
        public DbSet<SalesLT_ProductModel> SalesLT_ProductModels { get; set; } // ProductModel
        public DbSet<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription
        public DbSet<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail
        public DbSet<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=EFUnitTestDb;Integrated Security=True;Encrypt=False;TrustServerCertificate=True");
                optionsBuilder.UseLazyLoadingProxies();
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasSequence<int>("SalesOrderNumber", "SalesLT").StartsAt(1).IncrementsBy(1).IsCyclic(false);

            modelBuilder.ApplyConfiguration(new SalesLT_AddressConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_CustomerAddressConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductDescriptionConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductModelConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductModelProductDescriptionConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_SalesOrderDetailConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_SalesOrderHeaderConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }


        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
        static partial void OnCreateModelPartial(ModelBuilder modelBuilder, string schema);
    }
}
// </auto-generated>
