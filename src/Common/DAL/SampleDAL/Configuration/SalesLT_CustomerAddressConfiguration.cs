// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace SampleDAL
{
    // CustomerAddress
    public class SalesLT_CustomerAddressConfiguration : IEntityTypeConfiguration<SalesLT_CustomerAddress>
    {
        public void Configure(EntityTypeBuilder<SalesLT_CustomerAddress> builder)
        {
            builder.ToTable("CustomerAddress", "SalesLT");
            builder.HasKey(x => new { x.CustomerId, x.AddressId }).HasName("PK_CustomerAddress_CustomerID_AddressID").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AddressId).HasColumnName(@"AddressID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AddressType).HasColumnName(@"AddressType").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.SalesLT_Address).WithMany(b => b.SalesLT_CustomerAddresses).HasForeignKey(c => c.AddressId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerAddress_Address_AddressID");
            builder.HasOne(a => a.SalesLT_Customer).WithMany(b => b.SalesLT_CustomerAddresses).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerAddress_Customer_CustomerID");

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_CustomerAddress_rowguid").IsUnique();
        }
    }

}
// </auto-generated>
